#include <iostream>
using namespace std;

class Queue {
private:
    int front, rear, capacity;
    int* queue;

public:
    Queue(int c) {
        front = rear = 0;
        capacity = c;
        queue = new int;
    }

    ~Queue() { delete[] queue; }

    // Fungsi untuk menambahkan elemen ke queue
    void enqueue(int data) {
        if (capacity == rear) {
            cout << "Queue is full\n";
            return;
        } else {
            queue[rear] = data;
            rear++;
        }
    }

    // Fungsi untuk menghapus elemen dari queue
    void dequeue() {
        if (front == rear) {
            cout << "Queue is empty\n";
            return;
        } else {
            for (int i = 0; i < rear - 1; i++) {
                queue[i] = queue[i + 1];
            }
            rear--;
        }
    }

    // Fungsi untuk menampilkan elemen di depan queue
    void displayFront() {
        if (front == rear) {
            cout << "Queue is empty\n";
            return;
        }
        cout << "Element at front: " << queue[front] << endl;
    }

    // Fungsi untuk menampilkan semua elemen dalam queue
    void displayQueue() {
        if (front == rear) {
            cout << "Queue is empty\n";
            return;
        }
        for (int i = front; i < rear; i++) {
            cout << queue[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Queue q(5);

    // Menambahkan elemen ke queue
    q.enqueue(10);
    q.enqueue(20);
    q.enqueue(30);

    // Menampilkan semua elemen dalam queue
    q.displayQueue();

    // Menghapus elemen dari queue
    q.dequeue();

    // Menampilkan semua elemen dalam queue setelah penghapusan
    q.displayQueue();

    return 0;
}
